# This workflow will build a Swift project
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: macos-latest

    env:
      SCHEME: NewsReader  # <- change if your scheme name differs

    steps:
      - uses: actions/checkout@v4

      # Pin an Xcode that has iOS 17.x runtimes on GH-hosted runners (adjust if needed).
      - name: Select Xcode
        run: |
          set -e
          if [ -d "/Applications/Xcode_15.4.app" ]; then
            sudo xcode-select -s "/Applications/Xcode_15.4.app"
          elif [ -d "/Applications/Xcode_16.app" ]; then
            # If your repo requires Xcode 16, use this instead:
            sudo xcode-select -s "/Applications/Xcode_16.app"
          fi
          xcodebuild -version
          xcodebuild -showsdks

      # Figure out if this is a CocoaPods workspace or a plain project
      - name: Resolve Xcode container (workspace/project)
        id: resolve
        run: |
          set -euo pipefail
          if compgen -G "*.xcworkspace" > /dev/null; then
            WS=$(ls -1 *.xcworkspace | head -n1)
            echo "kind=workspace" >> "$GITHUB_OUTPUT"
            echo "name=$WS" >> "$GITHUB_OUTPUT"
          elif compgen -G "*.xcodeproj" > /dev/null; then
            PR=$(ls -1 *.xcodeproj | head -n1)
            echo "kind=project" >> "$GITHUB_OUTPUT"
            echo "name=$PR" >> "$GITHUB_OUTPUT"
          else
            echo "No .xcworkspace or .xcodeproj found at repo root"; exit 1
          fi

      # Ask xcodebuild (not simctl) which simulator destinations are valid for THIS scheme.
      - name: Show available destinations for scheme (debug)
        run: |
          set -e
          if [ "${{ steps.resolve.outputs.kind }}" = "workspace" ]; then
            xcodebuild -workspace "${{ steps.resolve.outputs.name }}" -scheme "$SCHEME" -showdestinations -destination 'platform=iOS Simulator' | sed -n '/== Available destinations ==/,$p'
          else
            xcodebuild -project "${{ steps.resolve.outputs.name }}" -scheme "$SCHEME" -showdestinations -destination 'platform=iOS Simulator' | sed -n '/== Available destinations ==/,$p'
          fi

      # Parse the FIRST iOS Simulator id that xcodebuild actually offers for this scheme.
      - name: Pick simulator id from xcodebuild output
        id: pick
        run: |
          set -euo pipefail
          if [ "${{ steps.resolve.outputs.kind }}" = "workspace" ]; then
            OUT=$(xcodebuild -workspace "${{ steps.resolve.outputs.name }}" -scheme "$SCHEME" -showdestinations -destination 'platform=iOS Simulator' 2>&1)
          else
            OUT=$(xcodebuild -project "${{ steps.resolve.outputs.name }}" -scheme "$SCHEME" -showdestinations -destination 'platform=iOS Simulator' 2>&1)
          fi

          # Grab the first "id: XXXXX-â€¦" line that appears under Available destinations
          SIM_ID=$(printf "%s\n" "$OUT" | awk '/== Available destinations ==/{flag=1;next}/==/{flag=0}flag' | grep -Eo 'id: [A-F0-9-]+' | head -n1 | awk '{print $2}')

          if [ -z "${SIM_ID:-}" ]; then
            echo "Could not parse a simulator id from xcodebuild -showdestinations output."
            echo "Raw output:"
            echo "$OUT"
            exit 1
          fi

          echo "id=$SIM_ID" >> "$GITHUB_OUTPUT"
          echo "Picked simulator id: $SIM_ID"

      - name: Boot picked simulator
        run: |
          set -e
          xcrun simctl boot "${{ steps.pick.outputs.id }}" || true
          xcrun simctl bootstatus "${{ steps.pick.outputs.id }}" -b

      - name: Build & Test with Coverage
        run: |
          set -e
          if [ "${{ steps.resolve.outputs.kind }}" = "workspace" ]; then
            xcodebuild \
              -workspace "${{ steps.resolve.outputs.name }}" \
              -scheme "$SCHEME" \
              -destination "platform=iOS Simulator,id=${{ steps.pick.outputs.id }}" \
              -destination-timeout 180 \
              -enableCodeCoverage YES \
              test
          else
            xcodebuild \
              -project "${{ steps.resolve.outputs.name }}" \
              -scheme "$SCHEME" \
              -destination "platform=iOS Simulator,id=${{ steps.pick.outputs.id }}" \
              -destination-timeout 180 \
              -enableCodeCoverage YES \
              test
          fi

      - name: Export Coverage (JSON)
        run: |
          set -e
          xcrun xccov view --report --json \
            ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult > coverage.json
          wc -c coverage.json || true
          head -c 400 coverage.json || true

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.json
