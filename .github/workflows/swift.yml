# This workflow will build a Swift project
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: macos-latest

    env:
      SCHEME: NewsReader
      PROJECT: NewsReader.xcodeproj
      TEST_PLAN: NewsRaederTestPlan
      CONFIGURATION: Debug
      DESTINATION: "platform=iOS Simulator,name=iPhone 16,OS=latest"
      RESULT_BUNDLE: NewsRaederTestsResult.xcresult

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Pick the newest installed Xcode 16.x (falls back to default if none found) ---
      - name: Select Xcode 16+
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE=$(ls -1d /Applications/Xcode_16*.app 2>/dev/null | sort -V | tail -n1 || true)
          if [[ -n "${CANDIDATE:-}" ]]; then
            echo "Selecting ${CANDIDATE}"
            sudo xcode-select -s "$CANDIDATE"
          else
            echo "No Xcode_16*.app found; using system default:"
            xcodebuild -version
          fi

      - name: Show Xcode & SDKs
        run: |
          xcodebuild -version
          echo "---- SDKs ----"
          xcodebuild -showsdks
          echo "---- Runtimes ----"
          xcrun simctl list runtimes
          echo "---- Devices (available) ----"
          xcrun simctl list devices available | sed -n '1,120p'

      # Ensure an iOS simulator SDK/runtimes >= 17 exist (min deployment target is 17)
      - name: Verify iOS 17+ SDK present
        shell: bash
        run: |
          set -euo pipefail
          if ! xcodebuild -showsdks | grep -E "iphonesimulator(17|18|19)"; then
            echo "Required iOS 17+ Simulator SDK not found on this runner."
            exit 1
          fi

      # --- Cache Swift Package Manager artifacts for speed ---
      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: spm-${{ runner.os }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-

      - name: Resolve Swift Packages
        run: |
          xcodebuild -resolvePackageDependencies -project "$PROJECT" -scheme "$SCHEME"

      # --- Build & Test with the Test Plan ---
      - name: Build for testing
        run: |
          set -euo pipefail
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination "$DESTINATION" \
            -sdk iphonesimulator \
            -enableCodeCoverage YES \
            build-for-testing

      - name: Run tests (using Test Plan)
        run: |
          set -euo pipefail
          rm -rf "$RESULT_BUNDLE"
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination "$DESTINATION" \
            -sdk iphonesimulator \
            -testPlan "$TEST_PLAN" \
            -enableCodeCoverage YES \
            -resultBundlePath "$RESULT_BUNDLE" \
            test

      # --- Artifacts: keep the .xcresult bundle for inspection ---
      - name: Upload xcresult
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RESULT_BUNDLE }}
          path: ${{ env.RESULT_BUNDLE }}
          retention-days: 7
