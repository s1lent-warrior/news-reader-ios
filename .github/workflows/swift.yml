# This workflow will build a Swift project
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      # Pick a known-good Xcode; adjust if your runner has a different path.
      - name: Select Xcode
        run: |
          set -e
          if [ -d "/Applications/Xcode_15.4.app" ]; then
            sudo xcode-select -s "/Applications/Xcode_15.4.app"
          else
            echo "Xcode_15.4 not found, using default:"
            xcodebuild -version
          fi

      - name: Show Xcode & SDKs
        run: |
          xcodebuild -version
          xcodebuild -showsdks

      - name: List available iPhone simulators (debug)
        run: |
          python3 - <<'PY'
          import json, subprocess
          data = json.loads(subprocess.check_output(["xcrun","simctl","list","devices","--json"]))
          for rt, devs in data["devices"].items():
              for dev in devs:
                  if dev.get("isAvailable") and "iPhone" in dev.get("name",""):
                      print(f"- {dev['name']} • {rt} • {dev['udid']}")
          PY

      # Pick the first available iPhone simulator and export to $GITHUB_OUTPUT
      - name: Pick first available iPhone simulator
        id: pick-sim
        run: |
          set -e
          python3 - <<'PY' >> "$GITHUB_OUTPUT"
          import json, subprocess, sys
          data = json.loads(subprocess.check_output(["xcrun","simctl","list","devices","--json"]))
          for rt, devs in data["devices"].items():
              for dev in devs:
                  if dev.get("isAvailable") and "iPhone" in dev.get("name",""):
                      print(f"udid={dev['udid']}")
                      print(f"name={dev['name']}")
                      print(f"runtime={rt}")
                      sys.exit(0)
          sys.exit("No available iPhone simulator found")
          PY
          echo "Picked: ${{ steps.pick-sim.outputs.name }} (${{ steps.pick-sim.outputs.runtime }})"

      - name: Boot picked simulator
        run: |
          set -e
          xcrun simctl boot "${{ steps.pick-sim.outputs.udid }}" || true
          xcrun simctl bootstatus "${{ steps.pick-sim.outputs.udid }}" -b

      - name: Build & Test with Coverage
        run: |
          set -e
          xcodebuild \
            -scheme NewsReader \
            -destination "platform=iOS Simulator,id=${{ steps.pick-sim.outputs.udid }}" \
            -destination-timeout 180 \
            -enableCodeCoverage YES \
            test

      - name: Export Coverage (JSON)
        run: |
          set -e
          xcrun xccov view --report --json \
            ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult > coverage.json
          ls -l coverage.json
          head -c 400 coverage.json || true

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.json
