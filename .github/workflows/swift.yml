# This workflow will build a Swift project
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      # Pin an Xcode that ships with iOS 17.x runtimes on GH-hosted macOS.
      # Adjust if your org uses a different image/Xcode path.
      - name: Select Xcode
        run: sudo xcode-select -s "/Applications/Xcode_15.4.app"

      - name: Show Xcode & SDKs
        run: |
          xcodebuild -version
          xcodebuild -showsdks

      - name: List simulators (debug)
        run: |
          xcrun simctl list devices --json | python3 -c 'import sys, json, textwrap
d=json.load(sys.stdin)
for rt, devs in d["devices"].items():
    for dev in devs:
        if dev.get("isAvailable") and "iPhone" in dev["name"]:
            print(f"- {dev['name']} • {rt} • {dev['udid']}")
'

      # Auto-pick the first available iPhone simulator by UDID (most robust destination).
      - name: Pick first available iPhone simulator
        id: pick-sim
        shell: bash
        run: |
          set -euo pipefail
          # Parse from JSON to avoid name/OS ambiguity.
          readarray -t FIELDS < <(xcrun simctl list devices --json | python3 - <<'PY'
import sys, json
d = json.load(sys.stdin)
for runtime, devs in d["devices"].items():
    for dev in devs:
        if dev.get("isAvailable") and "iPhone" in dev["name"]:
            print(dev["udid"])
            print(dev["name"])
            print(runtime)
            raise SystemExit(0)
raise SystemExit(2)
PY
)
          UDID="${FIELDS[0]}"
          NAME="${FIELDS[1]}"
          RUNTIME="${FIELDS[2]}"

          echo "Picked simulator:"
          echo "  UDID:   $UDID"
          echo "  Name:   $NAME"
          echo "  Runtime:$RUNTIME"

          echo "udid=$UDID"   >> "$GITHUB_OUTPUT"
          echo "name=$NAME"   >> "$GITHUB_OUTPUT"
          echo "runtime=$RUNTIME" >> "$GITHUB_OUTPUT"

      # (Optional) Boot it explicitly and wait until it's ready (xcodebuild can also boot it on demand).
      - name: Boot picked simulator
        run: |
          set -e
          xcrun simctl boot "${{ steps.pick-sim.outputs.udid }}" || true
          xcrun simctl bootstatus "${{ steps.pick-sim.outputs.udid }}" -b

      - name: Build & Test with Coverage (auto-picked destination)
        run: |
          set -e
          xcodebuild \
            -scheme NewsReader \
            -destination "platform=iOS Simulator,id=${{ steps.pick-sim.outputs.udid }}" \
            -destination-timeout 180 \
            -enableCodeCoverage YES \
            test

      - name: Export Coverage (JSON)
        run: |
          set -e
          xcrun xccov view --report --json \
            ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult > coverage.json

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.json
